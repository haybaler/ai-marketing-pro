"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mendable";
exports.ids = ["vendor-chunks/@mendable"];
exports.modules = {

/***/ "(rsc)/./node_modules/@mendable/firecrawl-js/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mendable/firecrawl-js/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CrawlWatcher: () => (/* binding */ CrawlWatcher),\n/* harmony export */   FirecrawlError: () => (/* binding */ FirecrawlError),\n/* harmony export */   \"default\": () => (/* binding */ FirecrawlApp)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var isows__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! isows */ \"(rsc)/./node_modules/isows/_esm/index.js\");\n/* harmony import */ var typescript_event_target__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! typescript-event-target */ \"(rsc)/./node_modules/typescript-event-target/dist/index.mjs\");\n// src/index.ts\n\n\n\n\n\nvar FirecrawlError = class extends Error {\n  statusCode;\n  details;\n  constructor(message, statusCode, details) {\n    super(message);\n    this.statusCode = statusCode;\n    this.details = details;\n  }\n};\nvar FirecrawlApp = class {\n  apiKey;\n  apiUrl;\n  isCloudService(url) {\n    return url.includes(\"api.firecrawl.dev\");\n  }\n  /**\n   * Initializes a new instance of the FirecrawlApp class.\n   * @param config - Configuration options for the FirecrawlApp instance.\n   */\n  constructor({ apiKey = null, apiUrl = null }) {\n    const baseUrl = apiUrl || \"https://api.firecrawl.dev\";\n    if (this.isCloudService(baseUrl) && typeof apiKey !== \"string\") {\n      throw new FirecrawlError(\"No API key provided\", 401);\n    }\n    this.apiKey = apiKey || \"\";\n    this.apiUrl = baseUrl;\n  }\n  /**\n   * Scrapes a URL using the Firecrawl API.\n   * @param url - The URL to scrape.\n   * @param params - Additional parameters for the scrape request.\n   * @returns The response from the scrape operation.\n   */\n  async scrapeUrl(url, params) {\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this.apiKey}`\n    };\n    let jsonData = { url, ...params };\n    if (jsonData?.extract?.schema) {\n      let schema = jsonData.extract.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        extract: {\n          ...jsonData.extract,\n          schema\n        }\n      };\n    }\n    if (jsonData?.jsonOptions?.schema) {\n      let schema = jsonData.jsonOptions.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        jsonOptions: {\n          ...jsonData.jsonOptions,\n          schema\n        }\n      };\n    }\n    try {\n      const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\n        this.apiUrl + `/v1/scrape`,\n        jsonData,\n        { headers, timeout: params?.timeout !== void 0 ? params.timeout + 5e3 : void 0 }\n      );\n      if (response.status === 200) {\n        const responseData = response.data;\n        if (responseData.success) {\n          return {\n            success: true,\n            warning: responseData.warning,\n            error: responseData.error,\n            ...responseData.data\n          };\n        } else {\n          throw new FirecrawlError(`Failed to scrape URL. Error: ${responseData.error}`, response.status);\n        }\n      } else {\n        this.handleError(response, \"scrape URL\");\n      }\n    } catch (error) {\n      this.handleError(error.response, \"scrape URL\");\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Searches using the Firecrawl API and optionally scrapes the results.\n   * @param query - The search query string.\n   * @param params - Optional parameters for the search request.\n   * @returns The response from the search operation.\n   */\n  async search(query, params) {\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this.apiKey}`\n    };\n    let jsonData = {\n      query,\n      limit: params?.limit ?? 5,\n      tbs: params?.tbs,\n      filter: params?.filter,\n      lang: params?.lang ?? \"en\",\n      country: params?.country ?? \"us\",\n      location: params?.location,\n      origin: params?.origin ?? \"api\",\n      timeout: params?.timeout ?? 6e4,\n      scrapeOptions: params?.scrapeOptions ?? { formats: [] }\n    };\n    if (jsonData?.scrapeOptions?.extract?.schema) {\n      let schema = jsonData.scrapeOptions.extract.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        scrapeOptions: {\n          ...jsonData.scrapeOptions,\n          extract: {\n            ...jsonData.scrapeOptions.extract,\n            schema\n          }\n        }\n      };\n    }\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/search`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        const responseData = response.data;\n        if (responseData.success) {\n          return {\n            success: true,\n            data: responseData.data,\n            warning: responseData.warning\n          };\n        } else {\n          throw new FirecrawlError(`Failed to search. Error: ${responseData.error}`, response.status);\n        }\n      } else {\n        this.handleError(response, \"search\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\", data: [] };\n  }\n  /**\n   * Initiates a crawl job for a URL using the Firecrawl API.\n   * @param url - The URL to crawl.\n   * @param params - Additional parameters for the crawl request.\n   * @param pollInterval - Time in seconds for job status checks.\n   * @param idempotencyKey - Optional idempotency key for the request.\n   * @returns The response from the crawl operation.\n   */\n  async crawlUrl(url, params, pollInterval = 2, idempotencyKey) {\n    const headers = this.prepareHeaders(idempotencyKey);\n    let jsonData = { url, ...params };\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/crawl`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        const id = response.data.id;\n        return this.monitorJobStatus(id, headers, pollInterval);\n      } else {\n        this.handleError(response, \"start crawl job\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  async asyncCrawlUrl(url, params, idempotencyKey) {\n    const headers = this.prepareHeaders(idempotencyKey);\n    let jsonData = { url, ...params };\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/crawl`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start crawl job\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Checks the status of a crawl job using the Firecrawl API.\n   * @param id - The ID of the crawl operation.\n   * @param getAllData - Paginate through all the pages of documents, returning the full list of all documents. (default: `false`)\n   * @param nextURL - The `next` URL from the previous crawl status. Only required if you're not manually increasing `skip`. Only used when `getAllData = false`.\n   * @param skip - How many entries to skip to paginate. Only required if you're not providing `nextURL`. Only used when `getAllData = false`.\n   * @param limit - How many entries to return. Only used when `getAllData = false`.\n   * @returns The response containing the job status.\n   */\n  async checkCrawlStatus(id, getAllData = false, nextURL, skip, limit) {\n    if (!id) {\n      throw new FirecrawlError(\"No crawl ID provided\", 400);\n    }\n    const headers = this.prepareHeaders();\n    const targetURL = new URL(nextURL ?? `${this.apiUrl}/v1/crawl/${id}`);\n    if (skip !== void 0) {\n      targetURL.searchParams.set(\"skip\", skip.toString());\n    }\n    if (limit !== void 0) {\n      targetURL.searchParams.set(\"limit\", limit.toString());\n    }\n    try {\n      const response = await this.getRequest(\n        targetURL.href,\n        headers\n      );\n      if (response.status === 200) {\n        let allData = response.data.data;\n        if (getAllData && response.data.status === \"completed\") {\n          let statusData = response.data;\n          if (\"data\" in statusData) {\n            let data = statusData.data;\n            while (typeof statusData === \"object\" && \"next\" in statusData) {\n              if (data.length === 0) {\n                break;\n              }\n              statusData = (await this.getRequest(statusData.next, headers)).data;\n              data = data.concat(statusData.data);\n            }\n            allData = data;\n          }\n        }\n        let resp = {\n          success: response.data.success,\n          status: response.data.status,\n          total: response.data.total,\n          completed: response.data.completed,\n          creditsUsed: response.data.creditsUsed,\n          next: getAllData ? void 0 : response.data.next,\n          expiresAt: new Date(response.data.expiresAt),\n          data: allData\n        };\n        if (!response.data.success && response.data.error) {\n          resp = {\n            ...resp,\n            success: false,\n            error: response.data.error\n          };\n        }\n        if (response.data.next) {\n          resp.next = response.data.next;\n        }\n        return resp;\n      } else {\n        this.handleError(response, \"check crawl status\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Returns information about crawl errors.\n   * @param id - The ID of the crawl operation.\n   * @returns Information about crawl errors.\n   */\n  async checkCrawlErrors(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.deleteRequest(\n        `${this.apiUrl}/v1/crawl/${id}/errors`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"check crawl errors\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Cancels a crawl job using the Firecrawl API.\n   * @param id - The ID of the crawl operation.\n   * @returns The response from the cancel crawl operation.\n   */\n  async cancelCrawl(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.deleteRequest(\n        `${this.apiUrl}/v1/crawl/${id}`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"cancel crawl job\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Initiates a crawl job and returns a CrawlWatcher to monitor the job via WebSocket.\n   * @param url - The URL to crawl.\n   * @param params - Additional parameters for the crawl request.\n   * @param idempotencyKey - Optional idempotency key for the request.\n   * @returns A CrawlWatcher instance to monitor the crawl job.\n   */\n  async crawlUrlAndWatch(url, params, idempotencyKey) {\n    const crawl = await this.asyncCrawlUrl(url, params, idempotencyKey);\n    if (crawl.success && crawl.id) {\n      const id = crawl.id;\n      return new CrawlWatcher(id, this);\n    }\n    throw new FirecrawlError(\"Crawl job failed to start\", 400);\n  }\n  /**\n   * Maps a URL using the Firecrawl API.\n   * @param url - The URL to map.\n   * @param params - Additional parameters for the map request.\n   * @returns The response from the map operation.\n   */\n  async mapUrl(url, params) {\n    const headers = this.prepareHeaders();\n    let jsonData = { url, ...params };\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/map`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"map\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Initiates a batch scrape job for multiple URLs using the Firecrawl API.\n   * @param url - The URLs to scrape.\n   * @param params - Additional parameters for the scrape request.\n   * @param pollInterval - Time in seconds for job status checks.\n   * @param idempotencyKey - Optional idempotency key for the request.\n   * @param webhook - Optional webhook for the batch scrape.\n   * @param ignoreInvalidURLs - Optional flag to ignore invalid URLs.\n   * @returns The response from the crawl operation.\n   */\n  async batchScrapeUrls(urls, params, pollInterval = 2, idempotencyKey, webhook, ignoreInvalidURLs) {\n    const headers = this.prepareHeaders(idempotencyKey);\n    let jsonData = { urls, webhook, ignoreInvalidURLs, ...params };\n    if (jsonData?.extract?.schema) {\n      let schema = jsonData.extract.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        extract: {\n          ...jsonData.extract,\n          schema\n        }\n      };\n    }\n    if (jsonData?.jsonOptions?.schema) {\n      let schema = jsonData.jsonOptions.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        jsonOptions: {\n          ...jsonData.jsonOptions,\n          schema\n        }\n      };\n    }\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/batch/scrape`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        const id = response.data.id;\n        return this.monitorJobStatus(id, headers, pollInterval);\n      } else {\n        this.handleError(response, \"start batch scrape job\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  async asyncBatchScrapeUrls(urls, params, idempotencyKey, webhook, ignoreInvalidURLs) {\n    const headers = this.prepareHeaders(idempotencyKey);\n    let jsonData = { urls, webhook, ignoreInvalidURLs, ...params ?? {} };\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/batch/scrape`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start batch scrape job\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Initiates a batch scrape job and returns a CrawlWatcher to monitor the job via WebSocket.\n   * @param urls - The URL to scrape.\n   * @param params - Additional parameters for the scrape request.\n   * @param idempotencyKey - Optional idempotency key for the request.\n   * @returns A CrawlWatcher instance to monitor the crawl job.\n   */\n  async batchScrapeUrlsAndWatch(urls, params, idempotencyKey, webhook, ignoreInvalidURLs) {\n    const crawl = await this.asyncBatchScrapeUrls(urls, params, idempotencyKey, webhook, ignoreInvalidURLs);\n    if (crawl.success && crawl.id) {\n      const id = crawl.id;\n      return new CrawlWatcher(id, this);\n    }\n    throw new FirecrawlError(\"Batch scrape job failed to start\", 400);\n  }\n  /**\n   * Checks the status of a batch scrape job using the Firecrawl API.\n   * @param id - The ID of the batch scrape operation.\n   * @param getAllData - Paginate through all the pages of documents, returning the full list of all documents. (default: `false`)\n   * @param nextURL - The `next` URL from the previous batch scrape status. Only required if you're not manually increasing `skip`. Only used when `getAllData = false`.\n   * @param skip - How many entries to skip to paginate. Only used when `getAllData = false`.\n   * @param limit - How many entries to return. Only used when `getAllData = false`.\n   * @returns The response containing the job status.\n   */\n  async checkBatchScrapeStatus(id, getAllData = false, nextURL, skip, limit) {\n    if (!id) {\n      throw new FirecrawlError(\"No batch scrape ID provided\", 400);\n    }\n    const headers = this.prepareHeaders();\n    const targetURL = new URL(nextURL ?? `${this.apiUrl}/v1/batch/scrape/${id}`);\n    if (skip !== void 0) {\n      targetURL.searchParams.set(\"skip\", skip.toString());\n    }\n    if (limit !== void 0) {\n      targetURL.searchParams.set(\"limit\", limit.toString());\n    }\n    try {\n      const response = await this.getRequest(\n        targetURL.href,\n        headers\n      );\n      if (response.status === 200) {\n        let allData = response.data.data;\n        if (getAllData && response.data.status === \"completed\") {\n          let statusData = response.data;\n          if (\"data\" in statusData) {\n            let data = statusData.data;\n            while (typeof statusData === \"object\" && \"next\" in statusData) {\n              if (data.length === 0) {\n                break;\n              }\n              statusData = (await this.getRequest(statusData.next, headers)).data;\n              data = data.concat(statusData.data);\n            }\n            allData = data;\n          }\n        }\n        let resp = {\n          success: response.data.success,\n          status: response.data.status,\n          total: response.data.total,\n          completed: response.data.completed,\n          creditsUsed: response.data.creditsUsed,\n          next: getAllData ? void 0 : response.data.next,\n          expiresAt: new Date(response.data.expiresAt),\n          data: allData\n        };\n        if (!response.data.success && response.data.error) {\n          resp = {\n            ...resp,\n            success: false,\n            error: response.data.error\n          };\n        }\n        if (response.data.next) {\n          resp.next = response.data.next;\n        }\n        return resp;\n      } else {\n        this.handleError(response, \"check batch scrape status\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Returns information about batch scrape errors.\n   * @param id - The ID of the batch scrape operation.\n   * @returns Information about batch scrape errors.\n   */\n  async checkBatchScrapeErrors(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.deleteRequest(\n        `${this.apiUrl}/v1/batch/scrape/${id}/errors`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"check batch scrape errors\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Extracts information from URLs using the Firecrawl API.\n   * Currently in Beta. Expect breaking changes on future minor versions.\n   * @param urls - The URLs to extract information from. Optional if using other methods for data extraction.\n   * @param params - Additional parameters for the extract request.\n   * @returns The response from the extract operation.\n   */\n  async extract(urls, params) {\n    const headers = this.prepareHeaders();\n    let jsonData = { urls, ...params };\n    let jsonSchema;\n    try {\n      if (!params?.schema) {\n        jsonSchema = void 0;\n      } else if (typeof params.schema === \"object\" && params.schema !== null && Object.getPrototypeOf(params.schema)?.constructor?.name?.startsWith(\"Zod\")) {\n        jsonSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(params.schema);\n      } else {\n        jsonSchema = params.schema;\n      }\n    } catch (error) {\n      throw new FirecrawlError(\"Invalid schema. Schema must be either a valid Zod schema or JSON schema object.\", 400);\n    }\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/extract`,\n        { ...jsonData, schema: jsonSchema, origin: params?.origin || \"api-sdk\" },\n        headers\n      );\n      if (response.status === 200) {\n        const jobId = response.data.id;\n        let extractStatus;\n        do {\n          const statusResponse = await this.getRequest(\n            `${this.apiUrl}/v1/extract/${jobId}`,\n            headers\n          );\n          extractStatus = statusResponse.data;\n          if (extractStatus.status === \"completed\") {\n            if (extractStatus.success) {\n              return {\n                success: true,\n                data: extractStatus.data,\n                warning: extractStatus.warning,\n                error: extractStatus.error,\n                sources: extractStatus?.sources || void 0\n              };\n            } else {\n              throw new FirecrawlError(`Failed to extract data. Error: ${extractStatus.error}`, statusResponse.status);\n            }\n          } else if (extractStatus.status === \"failed\" || extractStatus.status === \"cancelled\") {\n            throw new FirecrawlError(`Extract job ${extractStatus.status}. Error: ${extractStatus.error}`, statusResponse.status);\n          }\n          await new Promise((resolve) => setTimeout(resolve, 1e3));\n        } while (extractStatus.status !== \"completed\");\n      } else {\n        this.handleError(response, \"extract\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500, error.response?.data?.details);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Initiates an asynchronous extract job for a URL using the Firecrawl API.\n   * @param url - The URL to extract data from.\n   * @param params - Additional parameters for the extract request.\n   * @param idempotencyKey - Optional idempotency key for the request.\n   * @returns The response from the extract operation.\n   */\n  async asyncExtract(urls, params, idempotencyKey) {\n    const headers = this.prepareHeaders(idempotencyKey);\n    let jsonData = { urls, ...params };\n    let jsonSchema;\n    try {\n      if (params?.schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.ZodType) {\n        jsonSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(params.schema);\n      } else {\n        jsonSchema = params?.schema;\n      }\n    } catch (error) {\n      throw new FirecrawlError(\"Invalid schema. Schema must be either a valid Zod schema or JSON schema object.\", 400);\n    }\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/extract`,\n        { ...jsonData, schema: jsonSchema },\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start extract job\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500, error.response?.data?.details);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Retrieves the status of an extract job.\n   * @param jobId - The ID of the extract job.\n   * @returns The status of the extract job.\n   */\n  async getExtractStatus(jobId) {\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/extract/${jobId}`,\n        this.prepareHeaders()\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"get extract status\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n  }\n  /**\n   * Prepares the headers for an API request.\n   * @param idempotencyKey - Optional key to ensure idempotency.\n   * @returns The prepared headers.\n   */\n  prepareHeaders(idempotencyKey) {\n    return {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this.apiKey}`,\n      ...idempotencyKey ? { \"x-idempotency-key\": idempotencyKey } : {}\n    };\n  }\n  /**\n   * Sends a POST request to the specified URL.\n   * @param url - The URL to send the request to.\n   * @param data - The data to send in the request.\n   * @param headers - The headers for the request.\n   * @returns The response from the POST request.\n   */\n  postRequest(url, data, headers) {\n    return axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(url, data, { headers, timeout: data?.timeout ? data.timeout + 5e3 : void 0 });\n  }\n  /**\n   * Sends a GET request to the specified URL.\n   * @param url - The URL to send the request to.\n   * @param headers - The headers for the request.\n   * @returns The response from the GET request.\n   */\n  async getRequest(url, headers) {\n    try {\n      return await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(url, { headers });\n    } catch (error) {\n      if (error instanceof axios__WEBPACK_IMPORTED_MODULE_4__.AxiosError && error.response) {\n        return error.response;\n      } else {\n        throw error;\n      }\n    }\n  }\n  /**\n   * Sends a DELETE request to the specified URL.\n   * @param url - The URL to send the request to.\n   * @param headers - The headers for the request.\n   * @returns The response from the DELETE request.\n   */\n  async deleteRequest(url, headers) {\n    try {\n      return await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].delete(url, { headers });\n    } catch (error) {\n      if (error instanceof axios__WEBPACK_IMPORTED_MODULE_4__.AxiosError && error.response) {\n        return error.response;\n      } else {\n        throw error;\n      }\n    }\n  }\n  /**\n   * Monitors the status of a crawl job until completion or failure.\n   * @param id - The ID of the crawl operation.\n   * @param headers - The headers for the request.\n   * @param checkInterval - Interval in seconds for job status checks.\n   * @param checkUrl - Optional URL to check the status (used for v1 API)\n   * @returns The final job status or data.\n   */\n  async monitorJobStatus(id, headers, checkInterval) {\n    try {\n      let failedTries = 0;\n      while (true) {\n        let statusResponse = await this.getRequest(\n          `${this.apiUrl}/v1/crawl/${id}`,\n          headers\n        );\n        if (statusResponse.status === 200) {\n          failedTries = 0;\n          let statusData = statusResponse.data;\n          if (statusData.status === \"completed\") {\n            if (\"data\" in statusData) {\n              let data = statusData.data;\n              while (typeof statusData === \"object\" && \"next\" in statusData) {\n                if (data.length === 0) {\n                  break;\n                }\n                statusResponse = await this.getRequest(statusData.next, headers);\n                statusData = statusResponse.data;\n                data = data.concat(statusData.data);\n              }\n              statusData.data = data;\n              return statusData;\n            } else {\n              throw new FirecrawlError(\"Crawl job completed but no data was returned\", 500);\n            }\n          } else if ([\"active\", \"paused\", \"pending\", \"queued\", \"waiting\", \"scraping\"].includes(statusData.status)) {\n            checkInterval = Math.max(checkInterval, 2);\n            await new Promise(\n              (resolve) => setTimeout(resolve, checkInterval * 1e3)\n            );\n          } else {\n            throw new FirecrawlError(\n              `Crawl job failed or was stopped. Status: ${statusData.status}`,\n              500\n            );\n          }\n        } else {\n          failedTries++;\n          if (failedTries >= 3) {\n            this.handleError(statusResponse, \"check crawl status\");\n          }\n        }\n      }\n    } catch (error) {\n      throw new FirecrawlError(error, 500);\n    }\n  }\n  /**\n   * Handles errors from API responses.\n   * @param {AxiosResponse} response - The response from the API.\n   * @param {string} action - The action being performed when the error occurred.\n   */\n  handleError(response, action) {\n    if ([400, 402, 403, 408, 409, 500].includes(response.status)) {\n      const errorMessage = response.data.error || \"Unknown error occurred\";\n      const details = response.data.details ? ` - ${JSON.stringify(response.data.details)}` : \"\";\n      throw new FirecrawlError(\n        `Failed to ${action}. Status code: ${response.status}. Error: ${errorMessage}${details}`,\n        response.status,\n        response?.data?.details\n      );\n    } else {\n      throw new FirecrawlError(\n        `Unexpected error occurred while trying to ${action}. Status code: ${response.status}`,\n        response.status\n      );\n    }\n  }\n  /**\n   * Initiates a deep research operation on a given query and polls until completion.\n   * @param query - The query to research.\n   * @param params - Parameters for the deep research operation.\n   * @param onActivity - Optional callback to receive activity updates in real-time.\n   * @param onSource - Optional callback to receive source updates in real-time.\n   * @returns The final research results.\n   */\n  async deepResearch(query, params, onActivity, onSource) {\n    try {\n      const response = await this.asyncDeepResearch(query, params);\n      if (!response.success || \"error\" in response) {\n        return { success: false, error: \"error\" in response ? response.error : \"Unknown error\" };\n      }\n      if (!response.id) {\n        throw new FirecrawlError(`Failed to start research. No job ID returned.`, 500);\n      }\n      const jobId = response.id;\n      let researchStatus;\n      let lastActivityCount = 0;\n      let lastSourceCount = 0;\n      while (true) {\n        researchStatus = await this.checkDeepResearchStatus(jobId);\n        if (\"error\" in researchStatus && !researchStatus.success) {\n          return researchStatus;\n        }\n        if (onActivity && researchStatus.activities) {\n          const newActivities = researchStatus.activities.slice(lastActivityCount);\n          for (const activity of newActivities) {\n            onActivity(activity);\n          }\n          lastActivityCount = researchStatus.activities.length;\n        }\n        if (onSource && researchStatus.sources) {\n          const newSources = researchStatus.sources.slice(lastSourceCount);\n          for (const source of newSources) {\n            onSource(source);\n          }\n          lastSourceCount = researchStatus.sources.length;\n        }\n        if (researchStatus.status === \"completed\") {\n          return researchStatus;\n        }\n        if (researchStatus.status === \"failed\") {\n          throw new FirecrawlError(\n            `Research job ${researchStatus.status}. Error: ${researchStatus.error}`,\n            500\n          );\n        }\n        if (researchStatus.status !== \"processing\") {\n          break;\n        }\n        await new Promise((resolve) => setTimeout(resolve, 2e3));\n      }\n      return { success: false, error: \"Research job terminated unexpectedly\" };\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500, error.response?.data?.details);\n    }\n  }\n  /**\n   * Initiates a deep research operation on a given query without polling.\n   * @param params - Parameters for the deep research operation.\n   * @returns The response containing the research job ID.\n   */\n  async asyncDeepResearch(query, params) {\n    const headers = this.prepareHeaders();\n    let jsonData = { query, ...params };\n    if (jsonData?.jsonOptions?.schema) {\n      let schema = jsonData.jsonOptions.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        jsonOptions: {\n          ...jsonData.jsonOptions,\n          schema\n        }\n      };\n    }\n    try {\n      const response = await this.postRequest(\n        `${this.apiUrl}/v1/deep-research`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start deep research\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Checks the status of a deep research operation.\n   * @param id - The ID of the deep research operation.\n   * @returns The current status and results of the research operation.\n   */\n  async checkDeepResearchStatus(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/deep-research/${id}`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else if (response.status === 404) {\n        throw new FirecrawlError(\"Deep research job not found\", 404);\n      } else {\n        this.handleError(response, \"check deep research status\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * @deprecated Use deepResearch() instead\n   * Initiates a deep research operation on a given topic and polls until completion.\n   * @param topic - The topic to research.\n   * @param params - Parameters for the deep research operation.\n   * @param onActivity - Optional callback to receive activity updates in real-time.\n   * @returns The final research results.\n   */\n  async __deepResearch(topic, params, onActivity) {\n    try {\n      const response = await this.__asyncDeepResearch(topic, params);\n      if (!response.success || \"error\" in response) {\n        return { success: false, error: \"error\" in response ? response.error : \"Unknown error\" };\n      }\n      if (!response.id) {\n        throw new FirecrawlError(`Failed to start research. No job ID returned.`, 500);\n      }\n      const jobId = response.id;\n      let researchStatus;\n      let lastActivityCount = 0;\n      while (true) {\n        researchStatus = await this.__checkDeepResearchStatus(jobId);\n        if (\"error\" in researchStatus && !researchStatus.success) {\n          return researchStatus;\n        }\n        if (onActivity && researchStatus.activities) {\n          const newActivities = researchStatus.activities.slice(lastActivityCount);\n          for (const activity of newActivities) {\n            onActivity(activity);\n          }\n          lastActivityCount = researchStatus.activities.length;\n        }\n        if (researchStatus.status === \"completed\") {\n          return researchStatus;\n        }\n        if (researchStatus.status === \"failed\") {\n          throw new FirecrawlError(\n            `Research job ${researchStatus.status}. Error: ${researchStatus.error}`,\n            500\n          );\n        }\n        if (researchStatus.status !== \"processing\") {\n          break;\n        }\n        await new Promise((resolve) => setTimeout(resolve, 2e3));\n      }\n      return { success: false, error: \"Research job terminated unexpectedly\" };\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500, error.response?.data?.details);\n    }\n  }\n  /**\n   * @deprecated Use asyncDeepResearch() instead\n   * Initiates a deep research operation on a given topic without polling.\n   * @param params - Parameters for the deep research operation.\n   * @returns The response containing the research job ID.\n   */\n  async __asyncDeepResearch(topic, params) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.postRequest(\n        `${this.apiUrl}/v1/deep-research`,\n        { topic, ...params },\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start deep research\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * @deprecated Use checkDeepResearchStatus() instead\n   * Checks the status of a deep research operation.\n   * @param id - The ID of the deep research operation.\n   * @returns The current status and results of the research operation.\n   */\n  async __checkDeepResearchStatus(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/deep-research/${id}`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else if (response.status === 404) {\n        throw new FirecrawlError(\"Deep research job not found\", 404);\n      } else {\n        this.handleError(response, \"check deep research status\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Generates LLMs.txt for a given URL and polls until completion.\n   * @param url - The URL to generate LLMs.txt from.\n   * @param params - Parameters for the LLMs.txt generation operation.\n   * @returns The final generation results.\n   */\n  async generateLLMsText(url, params) {\n    try {\n      const response = await this.asyncGenerateLLMsText(url, params);\n      if (!response.success || \"error\" in response) {\n        return { success: false, error: \"error\" in response ? response.error : \"Unknown error\" };\n      }\n      if (!response.id) {\n        throw new FirecrawlError(`Failed to start LLMs.txt generation. No job ID returned.`, 500);\n      }\n      const jobId = response.id;\n      let generationStatus;\n      while (true) {\n        generationStatus = await this.checkGenerateLLMsTextStatus(jobId);\n        if (\"error\" in generationStatus && !generationStatus.success) {\n          return generationStatus;\n        }\n        if (generationStatus.status === \"completed\") {\n          return generationStatus;\n        }\n        if (generationStatus.status === \"failed\") {\n          throw new FirecrawlError(\n            `LLMs.txt generation job ${generationStatus.status}. Error: ${generationStatus.error}`,\n            500\n          );\n        }\n        if (generationStatus.status !== \"processing\") {\n          break;\n        }\n        await new Promise((resolve) => setTimeout(resolve, 2e3));\n      }\n      return { success: false, error: \"LLMs.txt generation job terminated unexpectedly\" };\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500, error.response?.data?.details);\n    }\n  }\n  /**\n   * Initiates a LLMs.txt generation operation without polling.\n   * @param url - The URL to generate LLMs.txt from.\n   * @param params - Parameters for the LLMs.txt generation operation.\n   * @returns The response containing the generation job ID.\n   */\n  async asyncGenerateLLMsText(url, params) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.postRequest(\n        `${this.apiUrl}/v1/llmstxt`,\n        { url, ...params },\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start LLMs.txt generation\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Checks the status of a LLMs.txt generation operation.\n   * @param id - The ID of the LLMs.txt generation operation.\n   * @returns The current status and results of the generation operation.\n   */\n  async checkGenerateLLMsTextStatus(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/llmstxt/${id}`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else if (response.status === 404) {\n        throw new FirecrawlError(\"LLMs.txt generation job not found\", 404);\n      } else {\n        this.handleError(response, \"check LLMs.txt generation status\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n};\nvar CrawlWatcher = class extends typescript_event_target__WEBPACK_IMPORTED_MODULE_1__.TypedEventTarget {\n  ws;\n  data;\n  status;\n  id;\n  constructor(id, app) {\n    super();\n    this.id = id;\n    const wsUrl = app.apiUrl.replace(/^http/, \"ws\");\n    this.ws = new isows__WEBPACK_IMPORTED_MODULE_5__.WebSocket(`${wsUrl}/v1/crawl/${id}`, app.apiKey);\n    this.status = \"scraping\";\n    this.data = [];\n    const messageHandler = (msg) => {\n      if (msg.type === \"done\") {\n        this.status = \"completed\";\n        this.dispatchTypedEvent(\"done\", new CustomEvent(\"done\", {\n          detail: {\n            status: this.status,\n            data: this.data,\n            id: this.id\n          }\n        }));\n      } else if (msg.type === \"error\") {\n        this.status = \"failed\";\n        this.dispatchTypedEvent(\"error\", new CustomEvent(\"error\", {\n          detail: {\n            status: this.status,\n            data: this.data,\n            error: msg.error,\n            id: this.id\n          }\n        }));\n      } else if (msg.type === \"catchup\") {\n        this.status = msg.data.status;\n        this.data.push(...msg.data.data ?? []);\n        for (const doc of this.data) {\n          this.dispatchTypedEvent(\"document\", new CustomEvent(\"document\", {\n            detail: {\n              ...doc,\n              id: this.id\n            }\n          }));\n        }\n      } else if (msg.type === \"document\") {\n        this.dispatchTypedEvent(\"document\", new CustomEvent(\"document\", {\n          detail: {\n            ...msg.data,\n            id: this.id\n          }\n        }));\n      }\n    };\n    this.ws.onmessage = ((ev) => {\n      if (typeof ev.data !== \"string\") {\n        this.ws.close();\n        return;\n      }\n      try {\n        const msg = JSON.parse(ev.data);\n        messageHandler(msg);\n      } catch (error) {\n        console.error(\"Error on message\", error);\n      }\n    }).bind(this);\n    this.ws.onclose = ((ev) => {\n      try {\n        const msg = JSON.parse(ev.reason);\n        messageHandler(msg);\n      } catch (error) {\n        console.error(\"Error on close\", error);\n      }\n    }).bind(this);\n    this.ws.onerror = ((_) => {\n      this.status = \"failed\";\n      this.dispatchTypedEvent(\"error\", new CustomEvent(\"error\", {\n        detail: {\n          status: this.status,\n          data: this.data,\n          error: \"WebSocket error\",\n          id: this.id\n        }\n      }));\n    }).bind(this);\n  }\n  close() {\n    this.ws.close();\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mendable/firecrawl-js/dist/index.js\n");

/***/ })

};
;